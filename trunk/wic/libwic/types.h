/*!	\file     types.h
	\version  0.0.1
	\author   mice, ICQ: 332-292-380, mailto:wonder.mice@gmail.com
	\brief    Описания базовых элементарных типов

	\todo     Более подробно описать файл types.h
*/

#pragma once

#ifndef WIC_LIBWIC_TYPES
#define WIC_LIBWIC_TYPES

////////////////////////////////////////////////////////////////////////////////
// include


////////////////////////////////////////////////////////////2222////////////////////
// wic namespace
namespace wic {


////////////////////////////////////////////////////////////////////////////////
// constants

//!	\brief Количество битов в байте
static const int BITS_PER_BYTE	= 8;


////////////////////////////////////////////////////////////////////////////////
// types

//! \brief Байт (8 бит), без знака
typedef unsigned char byte_t;

//! \brief Тип действительных вейвлет коэффициентов
typedef float w_t;

//! \brief Тип целочисленных вейвлет коэффициентов (проквантованных)
typedef int wk_t;

//! \brief Тип для групповых признаков подрезания ветвей
/*!	Групповой признак подрезания ветвей представляет собой битовую маску.
	Бит установленный в 0 указывает на подрезанную ветвь, бит установленный
	в 1 указывает на сохранённую ветвь. Для признаков подрезания
	используются младшие разряды.

	Имеет место следующее соответствие между номером бита и положением
	родительского элемента, подрезаемой (сохраняемой) ветви. Биты нумеруются
	справа (младшие биты имеют меньшие номера). Для LL саббенда:
	\verbatim
	      bit_0
	bit_1 bit_2
	\endverbatim

	Для остальных саббендов:
	\verbatim
	bit_0 bit_1
	bit_2 bit_3
	\endverbatim
*/
typedef unsigned char n_t;

//! \brief Тип для значений <i>RD-функции Лагранжа</i>
typedef double j_t;

//! \brief Тип размеров (ширина, высота, длинна)
/*!	Стоит обратить внимание, что данный тип является целочисленным со
	<b>знаком</b>. Некоторые части алгоритма используют это свойство,
	поэтому <b>не следует</b> заменять этот тип на <i>unsigned</i>.
*/
typedef int sz_t;

//!	\brief Тип для величин связанных с изменением размеров
typedef int dsz_t;

//!	\brief Тип для квантователя
typedef float q_t;

//! \brief Тип для прогнозных величин <i>P<sub>i</sub></i> и
//!	<i>S<sub>j</sub></i> из 35.pdf
typedef double pi_t;

//! \brief Тип для подсчёта битовых затрат в функциях
//!	<i>H<sub>spec</sub></i> и <i>H<sub>map</sub></i>  из 35.pdf
typedef double h_t;

//!	\brief Тип для параметра кодирования <i>lambda</i>. Используется
//! при вычислении <i>RD-функции Лагранжа</i>
typedef double lambda_t;

//!	\brief Целочисленные двумерные координаты
/*!	Этот тип можно было сделать обычной структурой с двумя полями.
	Это не было сделано, чтобы обеспечить пользователям этой
	структуры возможность, в будущем иметь более специфичные средства
	работы с двумерными координатами. Например, класс итератора по
	двумерной поверхности благодаря такому подходу сможет работать
	не только с целочисленными координатами.

	\todo Вероятно, будет правильнее вынести этот тип в отдельный класс,
	снабдив его необходимыми операторами и конструкторами.
*/
struct p_t {
	//! \brief Тип, который будет использован для координат
	typedef sz_t size_type;

	//! \brief Вспомогательный конструктор
	/*!	\param[in] x x координата
		\param[in] y y координата
	*/
	inline p_t(const size_type &x, const size_type &y): x(x), y(y) {}

	//! \brief Возвращает значение координаты x
	inline const size_type &getx() const { return x; }

	//! \brief Возвращает значение координаты y
	inline const size_type &gety() const { return y; }

	//! \brief Возвращает значение координаты x
	inline size_type &getx() { return x; }

	//! \brief Возвращает значение координаты y
	inline size_type &gety() { return y; }

	//! \brief x координата
	size_type x;

	//! \brief y координата
	size_type y;
};



}	// end of namespace wic



#endif	// WIC_LIBWIC_TYPES
