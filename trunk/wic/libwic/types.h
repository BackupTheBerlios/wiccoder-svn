/*******************************************************************************
* file:         codec.h                                                        *
* version:      0.1.0                                                          *
* author:       mice (mailto:my_mice@mail.ru, ICQ:332-292-380)                 *
* description:  not available                                                  *
* tests:        none                                                           *
*******************************************************************************/

#pragma once

#ifndef WIC_LIBWIC_TYPES
#define WIC_LIBWIC_TYPES

////////////////////////////////////////////////////////////////////////////////
// include


////////////////////////////////////////////////////////////////////////////////
// wic namespace
namespace wic {


////////////////////////////////////////////////////////////////////////////////
// types

//! \brief Байт (8 бит), без знака
typedef unsigned char byte_t;

//! \brief Тип действительных вейвлет коэффициентов
typedef float w_t;

//! \brief Тип целочисленных вейвлет коэффициентов
typedef int wk_t;

//! \brief Тип для признаков подрезания ветвей
typedef unsigned char n_t;

//! \brief Тип для значений RD-функции Лагранжа
typedef double j_t;

//! \brief Тип размеров (ширина, высота, длинна)
/*!	Стоит обратить внимание, что данный тип является целочисленным со
	<b>знаком</b>. Некоторые части алгоритма используют это свойство,
	поэтому не следует заменять этот тип на \c unsigned.
*/
typedef int sz_t;

//!	\brief Тип для изменений размеров
typedef int dsz_t;

//!	\\brief Тип для квантователя
typedef float q_t;

//! \brief Тип для прогнозных величин <i>P<sub>i</sub></i> и
//!	<i>S<sub>j</sub></i>
typedef double pi_t;

//!	\brief Целочисленные двумерные координаты
/*!	Этот тип можно было сделать обычной структурой с двумя полями.
	Это не было сделано, чтобы обеспечить пользователям этой
	структуры возможность, в будущем иметь более специфичные средства
	работы с двумерными координатами. Например, класс итератора по
	двумерной поверхности длагодаря такому подходу сможет работать
	не только с целочисленными координатами.
*/
struct p_t {
	//! \brief Тип, который будет использован для координат
	typedef sz_t size_type;

	//! \brief Вспомогательный конструктор
	/*!	\param[in] x x координата
		\param[in] y y координата
	*/
	p_t(const size_type &x, const size_type &y): x(x), y(y) {}

	//! \brief Возвращает значение координаты x
	const size_type &getx() const { return x; }

	//! \brief Возвращает значение координаты y
	const size_type &gety() const { return y; }

	//! \brief Возвращает значение координаты x
	size_type &getx() { return x; }

	//! \brief Возвращает значение координаты y
	size_type &gety() { return y; }

	//! \brief x координата
	size_type x;

	//! \brief y координата
	size_type y;
};



}	// end of namespace wic



#endif	// WIC_LIBWIC_TYPES
